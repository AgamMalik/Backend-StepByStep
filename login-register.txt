1. install dependencies
	-express
	-express-joi-validation (to validate the data before sending it to the controllers)
	-joi 
	-jsonwebtoken
	-mongoose
	-cors
	-dotenv
	-bcrypt
	-nodemon

2. -create server(express/node)(in sever/index file)
   -import http package
   -import cors, mongoose
   -import dotenv and config it

	-create port
	-create express app
	-use express.json middleware to change all the incoming data to json format
	-use cors middleware
	-create server
	-listen port/ server

3. create connection with database
	-build a database in mongodb
	-connect your application and copy url from mongodb cloud
	-paste that url in .env file
	-now connect to database in server.js/index.js(mongoose.connect(process.env.xyz)).
	-now if you want to start server only when the connection with the database is established .. then use..
	(mongoose.connect(process.env.xyz).then(() =>{server.listen(PORT, ()=> {console(server is listening)} })
	.catch((err)=>{clg})

4. now create server folder structures

5. create routes,controllers,middleware, models folders

6. create a file for authentication in routes folder(authRoutes.js)
	-import express
	-creater a router object to configure routes

	'create routes for register and login'
	-router.post('/register', (req,res) => {res.send('register routes')})
         now check it.
        -router.post('/login', (req,res) => {res.send('login routes')})
         now check it.

	-export it(router)

	"however we will transfer the logic to the controller folder later"

7. import this authRoutes folder in server.js file
	-const authRoutes = require(xyz)
	-now create a common middleware in server.js to register the routes before all the dedicated routes
	"app.use("/api/auth", authRoutes)

8. now check if routes are working or not in postman

9. now move the controllers to the controllers folder
	-create a new folder named auth in controller
	-now create three files...1.authControllers.js...2.postLogin.js...3.postRegister.js
	-in authControllers file import postLogin and postRegister and export them.
	"exports.controllers = {postLogin, postRegister,}

	-in postLogin, postRegister cut paste the controller logic from authRoutes.js and make them async
	 and in authControllers.js import postLogin and postRegister.

	-now in authRoutes.js require authentication handler from authController.js
	-now add that handler(authController) in register and login route
	"router.post('/register', authControllers.controllers.postLogin)"
	"router.post('/login', authControllers.controllers.postRegister)"

	-check again in postman

10. before we let our server to execute the logic in postRegister, postLogin controllers , we need to validate the data which is coming
	-require Joi
	-to make joi working with express , we need to require one more package(validator) express-joi-validation
	"const Joi = require('joi')"
	"const validator = require('express-joi-validation').createValidator({})"

	-now create validate schema fro every request coming before it go to our controller
	"const registerSchema = Joi.object({
  	 username: Joi.string().min(3).max(12).required(),
  	 password: Joi.string().min(6).max(12).required(),
  	 mail: Joi.string().email().required(),
	 });

	const loginSchema = Joi.object({
 	 password: Joi.string().min(6).max(12).required(),
 	 mail: Joi.string().email().required(),
	 });"

	-now use this validate schema before controllers
	"router.post("/register", validator.body(registerSchema), authControllers.controllers.postRegister);
	 router.post("/login", validator.body(loginSchema), authControllers.controllers.postLogin);"

	-test it in postman now

11. create a user model in models folder (user.js)
	-require mongoose
	-create userSchema(with type, unique etc)
	-export it

12. create postRegister controller logic
 	-make (req, res) asynsc=====> async(req, res)
	-inside it write try catch block
	-in catch(err)==> return res.status(500).send("")

	-in try
	-get username, mail, password from req.body (const {username, password, mail} = req.body)

	-check if user already exists using mail
		-first require User from models folder
		-const userExists = await User.exists({mail:mail.toLowerCase()})
			-if user exists, return status 409 with message

	-now encrypt the password
		-first require bcrypt
		-const encryptedPassword = await bcrypt.hash(password, salt)

	-create a user document and save it in database
		- const user = await User.create({
     		  username,
    		  mail: mail.toLowerCase(),
   	 	  password: encryptedPassword
  		  })

	-create a jwt token(will write its logic after creating login logic first)
		-const token = jwt.sign(
   		   {
   		     userId: user._id,
   		     mail:mail,
   		   },
   		     process.env.TOKEN_KEY,  (create this TOKEN_KEY in .env file)
   		   {
   		     expiresIn: "24h"
   		   }
   		   ) 

	-when all the above process is successfull, send the response to the client
		-res.status(201).json({
    		 userDetails: {
   	         mail: user.mail,
     	         token: token,
     	         username: user.username,
   		   },
  		  })

	-test it in postman

13. create postLogin controller logic
	-require User from models folder
	-require bcrypt...(to compare the passwords)

	-make (req, res) asynsc=====> async(req, res)
	-inside it write try catch block
	-in catch(err)==> return res.status(500).send("")

	-in try
	-get  mail, password from req.body (const {password, mail} = req.body)

	-find the user in dtatbase
		-const user = await User.findOne({mail: mail.toLowerCase()})

	-if user is there and password matches
		-if(user && (await bcrypt.compare(password, user.password))){

    		  // send new token(create it later)
    		     const token = jwt.sign(
     		    {
    	    	     userId: user._id,
       		     mail: mail,
    		     },
     		     process.env.TOKEN_KEY,
     		    {
      		     expiresIn: "24h",
    		     }
    		     );

		    return res.status(200).json({
       		    userDetails: {
        	    mail: user.mail,
        	    token: token,
        	    username: user.username,
      		        },
    		      });
  		  }

	-if user not found
		-return res.status(400).send('Invalid credentials. Please try again')

	-test it in postman

14. now create jwt where it is required
	-require jwt in postLogin and postRegister
	-we are creating it like if someone registers..he will automatically login and token will be created for him
	-create jwt token in point 12
	-create jwt token in point 13

	-test it in postman...if we are getting token on successful register
	-later we will use this token to get access to restricted routes in our server

15. create a middleware to check if token is valid
	-if the token is invalid ..wont be able to reach controllers of this route